#include<iostream>
#include <iomanip>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

//Structure to hold information about each item in a receipt
struct Item {
    string name;
    double price;
    int quantity;

    //Calculate total price for this item
    double total() const {
        return price * quantity;
    }
};

//Structure to represent a receipt
struct Receipt {
    int receiptNo;
    string date;
    vector<Item> items;    //List of items purchased in this receipt
    Receipt* next;    //Pointer to the next receipt
};

//Class to manage the linked list of receipts
class ReceiptList {
private:
    Receipt* head;     //Pointer to the first receipt in the list

public:
    ReceiptList() : head(nullptr) {}

    //Function to add a new receipt to the front of the linked list
    void addReceipt(int receiptNo, const string& date, const vector<Item>& items) {
        Receipt* newReceipt = new Receipt{ receiptNo, date, items, head };
        head = newReceipt;    //New receipt becomes the new head
    }

     //Function to display a single receipt in a formatted table
    void displayReceipt(const Receipt* r) {
        if (!r) return;
        cout << "Receipt No: " << r->receiptNo << "\nDate: " << r->date << endl;
        cout << "--------------------------------------------\n";
        cout << left << setw(5) << "No" << setw(25) << "Item Name" << setw(10) << "Price" << setw(10) << "Qty" << "Total\n";
        double grandTotal = 0;
        for (size_t i = 0; i < r->items.size(); ++i) {
            const Item& item = r->items[i];
            double total = item.total();
            cout << left << setw(5) << (i + 1) << setw(25) << item.name << setw(10) << item.price
                 << setw(10) << item.quantity << total << endl;
            grandTotal += total;    //Accumulate grand total
        }
        cout << "--------------------------------------------\n";
        cout << "TOTAL: RM " << grandTotal << "\n\n";
    }

    //Function to display all receipts in the system
    void viewAllReceipts() {
        Receipt* current = head;
        while (current) {
            displayReceipt(current);
            current = current->next;    //Move to the next receipt
        }
    }

    //Sequential search to find a receipt by receipt number
    void sequentialSearch(int targetReceiptNo) {
        Receipt* current = head;
        while (current) {
            if (current->receiptNo == targetReceiptNo) {
                cout << "[Sequential Search] Receipt found:\n";
                displayReceipt(current);
                return;
            }
            current = current->next;
        }
        cout << "Receipt not found with number " << targetReceiptNo << " (Sequential Search).\n";
    }    //End sequential search

    //Binary search to find a receipt by receipt number
    void binarySearch(int targetReceiptNo) {
        //Convert linked list to vector for binary search
        vector<Receipt*> receiptArray;
        Receipt* current = head;
        while (current) {
            receiptArray.push_back(current);
            current = current->next;
        }    //End while loop

        //Sort by receipt number
        sort(receiptArray.begin(), receiptArray.end(), [](Receipt* a, Receipt* b) {
            return a->receiptNo < b->receiptNo;
        });

        //Binary search on sorted vector
        int low = 0, high = receiptArray.size() - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (receiptArray[mid]->receiptNo == targetReceiptNo) {
                cout << "[Binary Search] Receipt found:\n";
                displayReceipt(receiptArray[mid]);
                return;
            } else if (receiptArray[mid]->receiptNo < targetReceiptNo) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        //If not found
        cout << "Receipt not found with number " << targetReceiptNo << " (Binary Search).\n";
    }

    //Destructor to clean up memory used by linked list
    ~ReceiptList() {
        while (head) {
            Receipt* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

//Function to add pre-set receipt data for testing
void createSampleReceipts(ReceiptList& list) {
    list.addReceipt(101, "29/4/2024", {
        {"C++ for Beginner", 138.0, 1},
        {"Let's Cook", 20.0, 2}
    });
    list.addReceipt(102, "29/4/2024", {
        {"Data Structures", 75.0, 3},
        {"Python Basics", 60.0, 1}
    });
    list.addReceipt(103, "29/4/2024", {
        {"Cooking 101", 25.0, 2}
    });
    list.addReceipt(104, "29/4/2024", {
        {"Java for All", 95.0, 1}
    });
    list.addReceipt(105, "29/4/2024", {
        {"Algorithms Deep Dive", 88.0, 1}
    });
}

//Main Menu Interface for Testing
int main() {
    ReceiptList list;
    createSampleReceipts(list);

    int choice, receiptNo;
    do {
        cout << "\n--- View Order Detail Menu ---\n";
        cout << "1. View All Receipts\n";
        cout << "2. Search by Receipt No (Linear Search)\n";
        cout << "3. Search by Receipt No (Binary Search)\n";
        cout << "0. Exit\n";
        cout << "Choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            list.viewAllReceipts();
            break;
        case 2:
            cout << "Enter Receipt No to search (Sequential): ";
            cin >> receiptNo;
            list.sequentialSearch(receiptNo);
            break;
        case 3:
            cout << "Enter Receipt No to search (Binary): ";
            cin >> receiptNo;
            list.binarySearch(receiptNo);
            break;
        case 0:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice.\n";
        }
    } while (choice != 0);

    return 0;
}
